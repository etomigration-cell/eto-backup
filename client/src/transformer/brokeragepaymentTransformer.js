import moment from "moment";

/**
 * Map all aihwform record fields for full detail view.
 */
export function transformBrokeragePayments(record) {
  return {
    // Identifiers
formResponseID:record.formResponseID,
formIdentifier:record.formIdentifier,
subjectID:record.subjectID,
groupID:record.groupID,
familyID:record.familyID,
responseSetID:record.responseSetID,
formID:record.formID,
collectionTypeID:record.collectionTypeID,
subjectTypeID:record.subjectTypeID,
collectionID:record.collectionID,
responseCreatedDate:record.responseCreatedDate,
programID:record.programID,
auditStaffID:record.auditStaffID,
auditDate:record.auditDate,
dataEnteredByID:record.dataEnteredByID,
draftSavedOn:record.draftSavedOn,
removedDate:record.removedDate,
purpose_6508:record.purpose_6508,
purpose_6508_ResponseChoiceID:record.purpose_6508_ResponseChoiceID,
context_6510:record.context_6510,
context_6510_ResponseChoiceID:record.context_6510_ResponseChoiceID,
paymentMethod_6511:record.paymentMethod_6511,
paymentMethod_6511_ResponseChoiceID:record.paymentMethod_6511_ResponseChoiceID,
numberOfAdults_6514:record.numberOfAdults_6514,
numberOfChildren_6515:record.numberOfChildren_6515,
numberOfNightsOfaccommodation_6516:record.numberOfNightsOfaccommodation_6516,
amountRecovered_6518:record.amountRecovered_6518,
transactionDate_6525:record.transactionDate_6525,
shouldthepaperformbeanonymous_6527:record.shouldthepaperformbeanonymous_6527,
shouldthepaperformbeanonymous_6527_ResponseChoiceID:record.shouldthepaperformbeanonymous_6527_ResponseChoiceID,
jobCode_6528:record.jobCode_6528,
jobCode_6528_ResponseChoiceID:record.jobCode_6528_ResponseChoiceID,
transactionAmount_6530:record.transactionAmount_6530,
isGSTincluded_6531:record.isGSTincluded_6531,
isGSTincluded_6531_ResponseChoiceID:record.isGSTincluded_6531_ResponseChoiceID,
nonGSTAmount_6532:record.nonGSTAmount_6532,
detailsofTransaction_6533:record.detailsofTransaction_6533,
paymentforAIHW_6535:record.paymentforAIHW_6535,
paymentforAIHW_6535_ResponseChoiceID:record.paymentforAIHW_6535_ResponseChoiceID,
purposeOther_6537:record.purposeOther_6537,
hUBReason_6541:record.hUBReason_6541,
hUBReason_6541_ResponseChoiceID:record.hUBReason_6541_ResponseChoiceID,
haspaymentalreadybeenmadeordoesfinancestillneedtopay_6548:record.haspaymentalreadybeenmadeordoesfinancestillneedtopay_6548,
haspaymentalreadybeenmadeordoesfinancestillneedtopay_6548_ResponseChoiceID:record.haspaymentalreadybeenmadeordoesfinancestillneedtopay_6548_ResponseChoiceID,
paymentMethod_6550:record.paymentMethod_6550,
paymentMethod_6550_ResponseChoiceID:record.paymentMethod_6550_ResponseChoiceID,
whoseBusinessCreditCard_6551:record.whoseBusinessCreditCard_6551,
vouchertype_6553:record.vouchertype_6553,
vouchertype_6553_ResponseChoiceID:record.vouchertype_6553_ResponseChoiceID,
chequePayableTo_6554:record.chequePayableTo_6554,
chequeDeliveryPostInstructions_6555:record.chequeDeliveryPostInstructions_6555,
chequeDeliveryPickupInstructions_6556:record.chequeDeliveryPickupInstructions_6556,
eFTAccountName_6558:record.eFTAccountName_6558,
eFTBSB_6559:record.eFTBSB_6559,
eFTAccountNumber_6560:record.eFTAccountNumber_6560,
bPayBillerCode_6561:record.bPayBillerCode_6561,
bPayBillerReference_6562:record.bPayBillerReference_6562,
isanyportionofthistransactionrecoverable_6563:record.isanyportionofthistransactionrecoverable_6563,
isanyportionofthistransactionrecoverable_6563_ResponseChoiceID:record.isanyportionofthistransactionrecoverable_6563_ResponseChoiceID,
amountRecovered2_6570:record.amountRecovered2_6570,
authorisingContact1_6571:record.authorisingContact1_6571,
authorisingContact2_6572:record.authorisingContact2_6572,
authorisingContactEmail1_6573:record.authorisingContactEmail1_6573,
authorisingContactEmail2_6574:record.authorisingContactEmail2_6574,
recoveryInvoiceAddress1_6577:record.recoveryInvoiceAddress1_6577,
recoveryInvoiceAddress2_6578:record.recoveryInvoiceAddress2_6578,
worker1_7379:record.worker1_7379,
worker2_7380:record.worker2_7380,
ifpaidbystaffpersonallywhichstaff_7384:record.ifpaidbystaffpersonallywhichstaff_7384,
recoveryInvoiceFax1_7389:record.recoveryInvoiceFax1_7389,
authorisingContactPhone1_7390:record.authorisingContactPhone1_7390,
recoveryInvoiceFax2_7394:record.recoveryInvoiceFax2_7394,
authorisingContactPhone2_7395:record.authorisingContactPhone2_7395,
teamLeaderSignOff_8255:record.teamLeaderSignOff_8255,
teamLeaderSignOff_8255_Signee:record.teamLeaderSignOff_8255_Signee,
teamLeaderSignOff_8255_Image:record.teamLeaderSignOff_8255_Image,
micahTeam_8276:record.micahTeam_8276,
micahTeam_8276_ResponseChoiceID:record.micahTeam_8276_ResponseChoiceID,
supplierProvider_8871:record.supplierProvider_8871,
recoveryInvoiceName1_8872:record.recoveryInvoiceName1_8872,
recoveryInvoiceName2_8873:record.recoveryInvoiceName2_8873,
hUBPurpose_9316:record.hUBPurpose_9316,
hUBPurpose_9316_ResponseChoiceID:record.hUBPurpose_9316_ResponseChoiceID,
hUBExpenseType_9317:record.hUBExpenseType_9317,
hUBExpenseType_9317_ResponseChoiceID:record.hUBExpenseType_9317_ResponseChoiceID,
micahTeam_11295:record.micahTeam_11295,
tenancyAccessorSustainment_13318:record.tenancyAccessorSustainment_13318,
tenancyAccessorSustainment_13318_ResponseChoiceID:record.tenancyAccessorSustainment_13318_ResponseChoiceID,
authorizedBy_16942:record.authorizedBy_16942,
authorizedBy_16942_Signee:record.authorizedBy_16942_Signee,
authorizedBy_16942_Image:record.authorizedBy_16942_Image,
authorizedBy_16943:record.authorizedBy_16943,
financeJobCode_16945:record.financeJobCode_16945,
financeShortJobCode_16946:record.financeShortJobCode_16946,
signatureofCreditCardHolder_16947:record.signatureofCreditCardHolder_16947,
signatureofCreditCardHolder_16947_Signee:record.signatureofCreditCardHolder_16947_Signee,
signatureofCreditCardHolder_16947_Image:record.signatureofCreditCardHolder_16947_Image,
selectBusinessCreditCardHolder_16948:record.selectBusinessCreditCardHolder_16948,
whichPettyCashTin_16959:record.whichPettyCashTin_16959,
willthistransactionbenefitonlythisindividualorisitforanentirefamily_21917:record.willthistransactionbenefitonlythisindividualorisitforanentirefamily_21917,
willthistransactionbenefitonlythisindividualorisitforanentirefamily_21917_ResponseChoiceID:record.willthistransactionbenefitonlythisindividualorisitforanentirefamily_21917_ResponseChoiceID,
serviceUserDFVOonlyOusterCondition_22992:record.serviceUserDFVOonlyOusterCondition_22992,
serviceUserDFVOonlyOusterCondition_22992_ResponseChoiceID:record.serviceUserDFVOonlyOusterCondition_22992_ResponseChoiceID,
istheServiceUsercurrentlylivinginthehome_22993:record.istheServiceUsercurrentlylivinginthehome_22993,
istheServiceUsercurrentlylivinginthehome_22993_ResponseChoiceID:record.istheServiceUsercurrentlylivinginthehome_22993_ResponseChoiceID,
numberofChildrenlivingwiththeServiceUserinhome_22995:record.numberofChildrenlivingwiththeServiceUserinhome_22995,
dateSafetyUpgradeCompleted_22996:record.dateSafetyUpgradeCompleted_22996,
safetyUpgradeComments_22997:record.safetyUpgradeComments_22997,
attachDocumentssuchasInvoicesorreceipts_23268:record.attachDocumentssuchasInvoicesorreceipts_23268,
ifotherWhatisit_23527:record.ifotherWhatisit_23527,
aBN_23535:record.aBN_23535,
bSBNumber_26963:record.bSBNumber_26963,
brokerageTypeShouldbeansweredonlybytheLotusDRCteam_27196:record.brokerageTypeShouldbeansweredonlybytheLotusDRCteam_27196,
brokerageTypeShouldbeansweredonlybytheLotusDRCteam_27196_ResponseChoiceID:record.brokerageTypeShouldbeansweredonlybytheLotusDRCteam_27196_ResponseChoiceID,
category_28340:record.category_28340,
category_28340_ResponseChoiceID:record.category_28340_ResponseChoiceID,
aIHWpurpose_28341:record.aIHWpurpose_28341,
aIHWpurpose_28341_ResponseChoiceID:record.aIHWpurpose_28341_ResponseChoiceID,
ofchildrenunder5_32024:record.ofchildrenunder5_32024,
childrenbetween6and12_32025:record.childrenbetween6and12_32025,
childrenbetween13and18_32026:record.childrenbetween13and18_32026


  };
}


export function transformBrokeragePayment(records) {
  const minimalKeys = [
    "vouchertype_6553",
    "Status",
    "purpose_6508",    
    "chequePayableTo_6554",
    "micahTeam_11295",
    
  ];

  // Map all records to frontend format first
  const mapped = records.map(transformBrokeragePayments);

  // Then extract minimal information from mapped records
  const minimal = mapped.map(rec =>
    ({
      ...Object.fromEntries(
        minimalKeys.map(key => [key, rec[key]])
      ),
      StaffName: `${rec.fName || ''} ${rec.lName || ''}`.trim(),
    })
  );

  return {
    minimal,
    full: mapped
  };
}
